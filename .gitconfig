[user]
  email = steelsojka@gmail.com
  name = Steven Sojka
[alias]
  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit
  # View the current working tree status using the short format
  s = status -s
  # Show the diff between the latest commit and the current state
  d = "!git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = "!d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Pull in remote changes for the current repository and all its submodules
  p = "!git pull; git submodule foreach git pull origin master"
  # Clone a repository including all submodules
  c = clone --recursive
  # Commit all changes
  ca = !git add -A && git commit -av
  # Switch to a branch, creating it if necessary
  go = checkout -B
  # Checkout and pull
  cop = "!c() { git checkout $1 && git pull origin $1;}; c"
  # List all other branches
  lob = "!git branch -a | awk '!/\\*/{print $1}' | sed s/'^remotes\\/origin\\/'// "
  # Checkout another branch by fuzzy finding it
  co = !git checkout $(git branch | fzf)
  # Push current branch to remote
  pc = "!git push origin $(git rev-parse --abbrev-ref HEAD) "
  # Force push current branch to remote
  pcf = "!git push -f origin $(git rev-parse --abbrev-ref HEAD) "
  # Interactive rebase with the given number of latest commits
  reb = "!g() { git fetch $1 && git rebase -i $1/$2;}; g"
  lga = log --graph --oneline --all --decorate
  lgb = log --graph --all --decorate --stat
  ls = log --pretty=format: '%C(yellow)%h%Creset -%Cred %ad%Creset:%s %Cgreen[%an]' --decorate
  lg = log --graph --pretty=format: '%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  last = log -1 HEAD
  plc = !git fetch && git pull origin $(git rev-parse --abbrev-ref HEAD)
  reset-to = "!c() { git fetch $1 && git reset --hard $1/$2; }; c"
  rebase-on = "!c() { git fetch $1 && git rebase -i $1/$2; }; c"
[apply]
  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes
  editor = nvim
  # Treat spaces before tabs, lines that are indented with 8 or more spaces, and
  # all kinds of trailing whitespace as an error.
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of
  # a line
  whitespace = space-before-tab,indent-with-non-tab,trailing-space
  pager = STEELVIM_MODE="git_pager" nvim -R
	; pager = diff-so-fancy | less --tabs=4 -RFX

[color]
  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
  ui = auto
  pager = no
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[merge]
  # Include summaries of merged commits in newly created merge commit messages
  log = true
  tool = vimdiff
[diff]
  tool = vimdiff
[difftool]
  prompt = false
[difftool "vscode"]
  cmd = code $LOCAL $REMOTE --diff --wait
  trustExitCode = false
[mergetool "vscode"]
  cmd = code $LOCAL $REMOTE --diff --wait
  trustExitCode = false
[mergetool "vimdiff"]
  cmd = STEELVIM_MODE=git_diff nvim -d $LOCAL $REMOTE $MERGED -c '$wincmd w' -c 'wincmd J'
[difftool "vimdiff"]
  cmd = STEELVIM_MODE=git_diff nvim -d $REMOTE $LOCAL

# URL shorthands
[url "git@github.com:"]
  insteadOf = gh:
  pushInsteadOf = github:
  pushInsteadOf = git://github.com/
[url "git://github.com/"]
  insteadOf = github:
[url "git@gist.github.com:"]
  insteadOf = gst:
  pushInsteadOf = gist:
  pushInsteadOf = git://gist.github.com/
[url "git://gist.github.com/"]
  insteadOf = gist:
[url "https://"]
  insteadOf = git://
[push]
  default = current
[include]
  path = ~/.localgitconfig
[credential]
  helper = cache
[trace2]
	maxFiles = 800
